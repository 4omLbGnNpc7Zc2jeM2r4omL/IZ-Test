name: 🤖 Build IZ-Test Automation

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest]
        python-version: ['3.11']

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 📦 Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: 🔧 Install System Dependencies (Windows)
      run: |
        # Chrome wird automatisch von webdriver-manager installiert
        echo "Chrome wird automatisch installiert"
        
    - name: 📚 Install Python Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 📋 Create Requirements if missing
      run: |
        if (!(Test-Path "requirements.txt")) {
          @"
        selenium>=4.15.0
        webdriver-manager>=4.0.0
        pandas>=2.0.0
        requests>=2.31.0
        openpyxl>=3.1.0
        Pillow>=10.0.0
        tk>=0.1.0
        "@ | Out-File -FilePath "requirements.txt" -Encoding UTF8
        }
      shell: powershell
      
    - name: 🧪 Test Script Syntax
      run: |
        python -m py_compile interzero_automation.py
        python -m py_compile database.py
        python -m py_compile file_selector_gui.py
        python -m py_compile excel_validator.py
        
    - name: 🧪 Test GUI Import
      run: |
        python -c "
        try:
            import tkinter
            print('✅ tkinter verfügbar')
        except ImportError:
            print('❌ tkinter nicht verfügbar')
        
        try:
            from file_selector_gui import select_files_gui
            print('✅ GUI-Module importierbar')
        except ImportError as e:
            print(f'❌ GUI-Import Fehler: {e}')
        
        try:
            import selenium
            from selenium import webdriver
            print('✅ Selenium verfügbar')
        except ImportError as e:
            print(f'❌ Selenium-Import Fehler: {e}')
        
        try:
            import pandas as pd
            print('✅ Pandas verfügbar')
        except ImportError as e:
            print(f'❌ Pandas-Import Fehler: {e}')
        "
        
    - name: 🏗️ Build Executable with PyInstaller
      run: |
        pip install pyinstaller
        
        # Erstelle PyInstaller Spec-Datei
        @"
        # -*- mode: python ; coding: utf-8 -*-
        import sys
        import os
        
        block_cipher = None
        
        a = Analysis(
            ['interzero_automation.py'],
            pathex=[],
            binaries=[],
            datas=[
                ('file_selector_gui.py', '.'),
                ('excel_validator.py', '.'),
                ('database.py', '.'),
                ('requirements.txt', '.'),
                # capsolver_config.py wird NICHT in die EXE eingebettet!
            ],
            hiddenimports=[
                'tkinter',
                'tkinter.filedialog',
                'tkinter.messagebox',
                'selenium',
                'selenium.webdriver',
                'selenium.webdriver.chrome',
                'selenium.webdriver.chrome.service',
                'selenium.webdriver.common',
                'webdriver_manager',
                'webdriver_manager.chrome',
                'pandas',
                'openpyxl',
                'PIL',
            ],
            hookspath=[],
            hooksconfig={},
            runtime_hooks=[],
            excludes=[],
            win_no_prefer_redirects=False,
            win_private_assemblies=False,
            cipher=block_cipher,
            noarchive=False,
        )
        
        pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)
        
        exe = EXE(
            pyz,
            a.scripts,
            a.binaries,
            a.zipfiles,
            a.datas,
            [],
            name='InterzeroAutomation',
            debug=False,
            bootloader_ignore_signals=False,
            strip=False,
            upx=True,
            upx_exclude=[],
            runtime_tmpdir=None,
            console=True,
            disable_windowed_traceback=False,
            argv_emulation=False,
            target_arch=None,
            codesign_identity=None,
            entitlements_file=None,
        )
        "@ | Out-File -FilePath "interzero_automation.spec" -Encoding UTF8
        
        # Build das Executable
        pyinstaller interzero_automation.spec --clean --noconfirm
        
        # Windows-spezifische Variablen setzen
        $EXECUTABLE = "dist\InterzeroAutomation.exe"
        $ARTIFACT_NAME = "InterzeroAutomation-Windows-${{ matrix.python-version }}"
        
        echo "EXECUTABLE=$EXECUTABLE" >> $env:GITHUB_ENV
        echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> $env:GITHUB_ENV
      shell: powershell
      
    - name: 📦 Create Distribution Package
      run: |
        New-Item -ItemType Directory -Path "release" -Force
        
        # Kopiere Windows Executable
        Copy-Item "dist\InterzeroAutomation.exe" "release\"
        
        # Kopiere capsolver_config.py EXTERN (nicht in EXE eingebettet)
        Copy-Item "capsolver_config.py" "release\"
        
        # Erstelle README für Distribution
        @"
        # 🤖 Interzero Automation
        
        ## Systemanforderungen
        
        - **Windows**: Windows 10/11 (64-bit)
        
        ## Installation
        
        1. Laden Sie das Windows Executable herunter
        2. **WICHTIG**: Behalten Sie die `capsolver_config.py` im gleichen Ordner wie das Executable
        3. Editieren Sie `capsolver_config.py` und tragen Sie Ihren CapSolver API-Key ein
        4. Platzieren Sie Ihre Excel und PDF-Dateien im gleichen Ordner
        5. Starten Sie das Programm: Doppelklick auf `InterzeroAutomation.exe`
        
        ## Konfiguration
        
        **Editieren Sie `capsolver_config.py`:**
        ```python
        CAPSOLVER_API_KEY = "CAP-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        ```
        
        ## Verwendung
        
        1. Das Programm startet eine GUI zur Dateiauswahl
        2. Wählen Sie Ihre Excel-Datei (erforderlich)
        3. Wählen Sie optional eine PDF-Datei für Upload
        4. Klicken Sie "Automation starten"
        
        ## Hinweise
        
        - Chrome wird automatisch installiert falls nicht vorhanden
        - Alle Aktionen werden in einer SQLite-Datenbank gespeichert
        - Screenshots werden als Base64 in der Datenbank archiviert
        - Bei Problemen prüfen Sie die Konsolen-Ausgabe
        
        ## Erstellt mit
        
        - Python ${{ matrix.python-version }}
        - Selenium WebDriver
        - PyInstaller
        - Platform: Windows
        
        Erstellt am: $(Get-Date)
        "@ | Out-File -FilePath "release\README.md" -Encoding UTF8
        
        # Erstelle Beispiel-Konfiguration
        @"
        # CapSolver API Konfiguration
        # Tragen Sie hier Ihren CapSolver API-Key ein
        CAPSOLVER_API_KEY = "CAP-XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"
        "@ | Out-File -FilePath "release\capsolver_config.py" -Encoding UTF8
      shell: powershell
      
    - name: 🧪 Test Executable
      run: |
        Write-Host "Windows Executable Test übersprungen (GUI erforderlich)"
        # Das Executable benötigt eine GUI-Umgebung für tkinter
      shell: powershell
      
    - name: 📤 Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT_NAME }}
        path: release/
        retention-days: 30
